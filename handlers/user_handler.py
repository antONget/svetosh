from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import requests
import asyncio
import logging
from config_data.config import Config, load_config
from services.googlesheets import append_client


router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class User(StatesGroup):
    get_name = State()
    get_phone = State()
    info_user = State()
    report2 = State()


user_dict = {}

def get_telegram_user(user_id, bot_token):
    url = f'https://api.telegram.org/bot{bot_token}/getChat'
    data = {'chat_id': user_id}
    response = requests.post(url, data=data)
    print(response.json())
    return response.json()


@router.message(CommandStart())
async def process_start_command_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º /start
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await message.answer(text=f'–®–∫–æ–ª–∞ ¬´–°–≤–µ—Ç–æ—á –∑–Ω–∞–Ω–∏—è¬ª –¥–ª—è –¥–µ—Ç–µ–π —Å –±–æ–ª—å—à–∏–º –±—É–¥—É—â–∏–º!\n\n'
                              f'üåü –£—á–∏–º —á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å –∏ —Å—á–∏—Ç–∞—Ç—å. –†–∞–∑–≤–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å, –ª–æ–≥–∏–∫—É –∏ –º—ã—à–ª–µ–Ω–∏–µüåü\n'
                              f'‚¨ÜÔ∏è –ü–æ–≤—ã—à–∞–µ–º —É —Ä–µ–±—ë–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö.\n'
                              f'‚¨ÜÔ∏è –ü–æ–≤—ã—à–∞–µ–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∑–∞ —Å—á–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è –ø–∞–º—è—Ç–∏ –∏ –ª–æ–≥–∏–∫–∏,'
                              f' —Ä–µ–±–µ–Ω–æ–∫ –±—ã—Å—Ç—Ä–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
    await asyncio.sleep(2)
    await message.answer(text=f'<b><i>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç</i></b>:\n'
                              f' ‚òùÔ∏è —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –µ–≥–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π,\n'
                              f' üí™ –≤—ã—è–≤–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞,\n'
                              f' üëâ –ø–æ–Ω—è—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è\n'
                              f' üëç  –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                         parse_mode='HTML')
    await asyncio.sleep(2)
    await message.answer(text=f'–î–ª—è –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: '
                              f'<a href="{config.tg_bot.channel}">https://t.me/svetoch_znaniya_spb</a>',
                         disable_web_page_preview=True,
                         parse_mode='HTML')

    user_channel_status = await bot.get_chat_member(chat_id=config.tg_bot.channel, user_id=message.from_user.id)

    if user_channel_status.status != 'left':
        await asyncio.sleep(2)
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        await state.set_state(User.get_name)
    else:
        button_1 = KeyboardButton(text='–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')
        keyboard = ReplyKeyboardMarkup(keyboard=[[button_1]], resize_keyboard=True)
        await message.answer(text=f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: '
                                  f'<a href="https://t.me/svetoch_znaniya_spb">https://t.me/svetoch_znaniya_spb</a>',
                             reply_markup=keyboard,
                             parse_mode='HTML')


@router.message(F.text == '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')
async def chek_subscription(message: Message, state: FSMContext, bot: Bot) -> None:
    logging.info(f'chek_subscription: {message.chat.id}')
    user_channel_status = await bot.get_chat_member(chat_id=config.tg_bot.channel, user_id=message.from_user.id)
    if user_channel_status.status != 'left':
        await asyncio.sleep(2)
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        await state.set_state(User.get_name)
    else:
        button_1 = KeyboardButton(text='–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')
        keyboard = ReplyKeyboardMarkup(keyboard=[[button_1]], resize_keyboard=True)
        await message.answer(text=f'–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: '
                                  f'<a href="https://t.me/svetoch_znaniya_spb">https://t.me/svetoch_znaniya_spb</a>',
                             reply_markup=keyboard,
                             parse_mode='HTML')


@router.message(F.text, StateFilter(User.get_name))
async def get_name_user(message: Message, state: FSMContext) -> None:
    logging.info(f'get_name_user: {message.chat.id}')
    await state.update_data(name_user=message.text)
    button_1 = KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚òéÔ∏è', request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1]], resize_keyboard=True)
    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª ‚§µÔ∏è',
                         reply_markup=keyboard)
    await state.set_state(User.get_phone)


@router.message(StateFilter(User.get_phone))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    logging.info(f'get_phone_user: {message.chat.id}')
    if message.contact:
        phone = message.contact.phone_number
        print(phone)
    else:
        phone = message.text
    await state.update_data(phone_user=phone)
    inline_btn_1 = InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='pass')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_btn_1]])
    await message.answer(text=f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π \n(–§–ò —Ä–µ–±–µ–Ω–∫–∞, —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏ –∏ –¥—Ä.) '
                              f'–∏–ª–∏ –Ω–∞–∂–∞—Ç—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.',
                         reply_markup=keyboard)
    await state.set_state(User.info_user)


@router.message(StateFilter(User.info_user))
async def get_info_user(message: Message, state: FSMContext, bot: Bot) -> None:
    logging.info(f'get_info_user: {message.chat.id}')
    await state.update_data(info=message.text)
    user_dict[message.chat.id] = await state.get_data()
    print('id_telegram= ', message.chat.id,
          'user_name= ', message.from_user.username,
          'name= ', user_dict[message.chat.id]['name_user'],
          'phone= ', user_dict[message.chat.id]['phone_user'])
    append_client(id_telegram=message.chat.id,
                  user_name=message.from_user.username,
                  name=user_dict[message.chat.id]['name_user'],
                  phone=user_dict[message.chat.id]['phone_user'],
                  info=user_dict[message.chat.id]['info'])

    channel = get_telegram_user(user_id=config.tg_bot.group_id, bot_token=config.tg_bot.token)
    if 'result' in channel:
        await bot.send_message(chat_id=config.tg_bot.group_id,
                               text=f'Telegram_id: {message.chat.id}\n'
                                    f'@username: {message.from_user.username}\n'
                                    f'–ò–º—è: {user_dict[message.chat.id]["name_user"]}\n'
                                    f'–¢–µ–ª–µ—Ñ–æ–Ω: {user_dict[message.chat.id]["phone_user"]}\n'
                                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_dict[message.chat.id]["info"]}')

    await message.answer(text=f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º!\n'
                              f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'
                              f' —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.')

@router.callback_query(StateFilter(User.info_user))
async def get_info_user(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    logging.info(f'get_info_user: {callback.message.chat.id}')
    await state.update_data(info='None')
    user_dict[callback.message.chat.id] = await state.get_data()
    channel = get_telegram_user(user_id=config.tg_bot.group_id, bot_token=config.tg_bot.token)
    if 'result' in channel:
        append_client(id_telegram=callback.message.chat.id,
                      user_name=callback.from_user.username,
                      name=user_dict[callback.message.chat.id]['name_user'],
                      phone=user_dict[callback.message.chat.id]['phone_user'],
                      info=user_dict[callback.message.chat.id]['info'])

    await bot.send_message(chat_id=config.tg_bot.group_id,
                           text=f'Telegram_id: {callback.message.chat.id}\n'
                                f'@username: {callback.from_user.username}\n'
                                f'–ò–º—è: {user_dict[callback.message.chat.id]["name_user"]}\n'
                                f'–¢–µ–ª–µ—Ñ–æ–Ω: {user_dict[callback.message.chat.id]["phone_user"]}\n'
                                f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_dict[callback.message.chat.id]["info"]}')

    await callback.message.answer(text=f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º!\n'
                                       f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'
                                       f' —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.')
